@page "/admin/categories"
@using SharedComponents.ReusableComponents
@rendermode InteractiveServer
@attribute [Authorize]
@inject IBlogApi Api

<h3>Categories</h3>

<EditForm OnValidSubmit="Save" Model="Item">
    <DataAnnotationsValidator/>
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
    <BlogInputText @bind-Value="@Item.Name" Label="Name"/>
    <BlogButton Type="BlogButton.ButtonType.Save">Save</BlogButton>
</EditForm>

<ItemList Items="Items" DeleteEvent="@Delete" SelectEvent="@Select" ItemType="Category">
    <ItemTemplate>
        @{
            if (context != null)
            {
                @context.Name
            }
        }
    </ItemTemplate>
</ItemList>

@code {
    private List<Category> Items { get; set; } = [];
    public Category Item { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Items = await Api.GetCategoriesAsync() ?? [];
        await base.OnInitializedAsync();
    }

    private async Task Delete(Category category)
    {
        try
        {
            await Api.DeleteCategoryAsync(category.Id!);
            Items.Remove(category);
        }
        catch
        {
            // ignored
        }
    }

    private async Task Save()
    {
        try
        {
            await Api.SaveCategoryAsync(Item);
            if (!Items.Contains(Item))
            {
                Items.Add(Item);
            }

            Item = new Category();
        }
        catch
        {
            // ignored
        }
    }

    private Task Select(Category category)
    {
        try
        {
            Item = category;
        }
        catch
        {
            // ignored
        }

        return Task.CompletedTask;
    }

}