@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@using Markdig
@using SharedComponents.Interfaces
@using SharedComponents.ReusableComponents
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@inject IBlogApi Api
@inject NavigationManager Manager
@inject IBrowserStorage BrowserStorage
@attribute [Authorize]

<EditForm Model="Post" OnValidSubmit="SavePostAsync">
    <DataAnnotationsValidator/>
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
    <BlogNavigationLock @ref="NavigationLock"/>
    <InputText @bind-Value="Post.Title"/>
    <ValidationMessage For="() => Post.Title"/>
    <InputDate @bind-Value="Post.PublishDate"/>
    <ValidationMessage For="() => Post.PublishDate"/>
    <InputSelect @bind-Value="_selectedCategory">
        <option value="0" disabled>None selected</option>
        @foreach (var category in Categories!)
        {
            <option value="@category.Id">@category.Name </option>
        }
    </InputSelect>
    <ul>
        @foreach (var tag in Tags!)
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id))
                {
                    <BlogButton Type="BlogButton.ButtonType.Save" OnClick="@(() => { Post.Tags.Remove(Post.Tags.Single(t => t.Id == tag.Id)); })">
                        Remove
                    </BlogButton>
                }
                else
                {
                    <BlogButton Type="BlogButton.ButtonType.Save" OnClick="@(() => { Post.Tags.Add(tag); })">
                        Add
                    </BlogButton>
                }
            </li>
        }
    </ul>
    <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHtmlAsync"/>
    <ValidationMessage For="() => Post.Text"/>
    <BlogButton Type="BlogButton.ButtonType.Save" OnClick="SavePostAsync">Save</BlogButton>
</EditForm>

@((MarkupString)MarkDownAsHtml!)

@code{

    [Parameter] public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category>? Categories { get; set; } = new();
    List<Tag>? Tags { get; set; } = new();
    string? _selectedCategory;
    string? MarkDownAsHtml { get; set; }
    BlogNavigationLock? NavigationLock { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var p = await Api.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Category != null)
                {
                    _selectedCategory = Post.Category.Id;
                }

                await UpdateHtmlAsync();
            }
        }

        Categories = await Api.GetCategoriesAsync();
        Tags = await Api.GetTagsAsync();
        await base.OnParametersSetAsync();
    }

    MarkdownPipeline _pipeline = default!;

    protected override async Task OnInitializedAsync()
    {
        _pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && string.IsNullOrEmpty(Id))
        {
            var saved = await BrowserStorage.GetAsync<BlogPost>("EditCurrentPost");
            if (saved != null)
            {
                Post = saved;
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateHtmlAsync()
    {
        if (!string.IsNullOrEmpty(Post.Text))
        {
            MarkDownAsHtml = Markdown.ToHtml(Post.Text, _pipeline);
            if (string.IsNullOrEmpty(Post.Id))
            {
                await BrowserStorage.SetAsync("EditCurrentPost", Post);
            }
        }
    }

    public async Task SavePostAsync()
    {
        if (!string.IsNullOrEmpty(_selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c => c.Id == _selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
        }

        await Api.SaveBlogPostAsync(Post);
        NavigationLock?.CurrentEditContext.MarkAsUnmodified();
        Manager.NavigateTo("/admin/blogposts");
    }

}