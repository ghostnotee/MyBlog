@page "/post/{BlogPostId}"
@inject IBlogApi Api
@inject NavigationManager Navman
@inject IBlogNotificationService NotificationService
@using Markdig
@using SharedComponents.Interfaces
@implements IDisposable
@rendermode InteractiveServer

@if (BlogPost != null)
{
    <PageTitle>@BlogPost.Title</PageTitle>
    <HeadContent>
        <meta property="og:title" content="@BlogPost.Title"/>
        <meta property="og:description" content="@(new string(BlogPost.Text.Take(100).ToArray()))"/>
        <meta property="og:image" content="@($"{Navman.BaseUri}/pathtoanimage.png")"/>
        <meta property="og:url" content="@Navman.Uri"/>
        <meta name="twitter:card" content="@(new string(BlogPost.Text.Take(100).ToArray()))"/>
    </HeadContent>

    <h2>@BlogPost.Title</h2>
    @((MarkupString)Markdown.ToHtml(BlogPost.Text, _pipeline))
    <Comments BlogPostId="@BlogPostId"/>
}

@code {
    [Parameter] public string? BlogPostId { get; set; }

    private BlogPost? BlogPost { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        BlogPost = await Api.GetBlogPostAsync(BlogPostId);
        await base.OnParametersSetAsync();
    }

    MarkdownPipeline _pipeline = null!;

    protected override Task OnInitializedAsync()
    {
        NotificationService.BlogPostChanged += PostChanged;
        _pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        NotificationService.BlogPostChanged -= PostChanged;
    }
    
    private async void PostChanged(BlogPost post)
    {
        if (BlogPost?.Id == post.Id)
        {
            BlogPost = post;
            await InvokeAsync(() => this.StateHasChanged());
        }
    }

}