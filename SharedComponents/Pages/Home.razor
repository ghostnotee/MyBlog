@page "/"
@using Markdig
@inject IBlogApi Api
@rendermode InteractiveServer

<Virtualize ItemsProvider="LoadPosts" Context="p">
    <article>
        <h2>@p.Title</h2>
        @((MarkupString)Markdown.ToHtml(new string(p.Text.Take(100).ToArray()), _pipeline))
        <a href="/Post/@p.Id">Read more</a>
    </article>
</Virtualize>


@code {
    protected List<BlogPost> Posts = new();
    public int TotalBlogPosts { get; set; }

    private async ValueTask<ItemsProviderResult<BlogPost>> LoadPosts(ItemsProviderRequest request)
    {
        if (TotalBlogPosts == 0)
        {
            TotalBlogPosts = await Api.GetBlogPostCountAsync();
        }

        var numBlogPosts = Math.Min(request.Count, TotalBlogPosts - request.StartIndex);
        var blogPosts = await Api.GetBlogPostsAsync(numBlogPosts, request.StartIndex);
        return new ItemsProviderResult<BlogPost>(blogPosts, TotalBlogPosts);
    }

    MarkdownPipeline _pipeline = null!;

    protected override Task OnInitializedAsync()
    {
        _pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();
        return base.OnInitializedAsync();
    }
}